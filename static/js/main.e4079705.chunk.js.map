{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Area","this","props","size","Component","Calculation","tray","biscuit","layers","biscuits","remainsInTotal","biscuitsInTotal","packsOfBiscuits","remains","toFixed","App","state","trayArea","length","width","biscuitArea","biscuitsInPack","trayVisible","biscuitVisible","layersVisible","biscuitsVisible","calcVisible","handleTraySubmit","bind","setTrayLength","setTrayWidth","renderTrayArea","handleBiscuitAreaSubmit","setBiscuitLength","setBiscuitAreaWidth","renderBiscuitArea","handleLayersSubmit","setLayers","setBiscuits","handleBiscuitsSubmit","e","preventDefault","setState","target","value","area","className","src","logo","alt","onSubmit","type","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4079705.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b2680743.svg\";","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\n// this thing is for testing\r\nclass Area extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>{this.props.size} cmÂ²</h4>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nclass Calculation extends Component {\r\n  render() {\r\n    let tray = this.props.tray,\r\n        biscuit = this.props.biscuit,\r\n        layers = this.props.layers,\r\n        biscuits = this.props.biscuits;\r\n    \r\n    let inOneLayer = tray / biscuit;\r\n    let remainsInLayer = tray % biscuit;\r\n    let remainsInTotal = remainsInLayer * layers;\r\n    let moreBiscuits = remainsInTotal / biscuit;\r\n    let biscuitsInTotal = (inOneLayer * layers) + moreBiscuits;\r\n    let packsOfBiscuits = biscuitsInTotal / biscuits;\r\n    let remains = biscuitsInTotal % biscuits;\r\n    return (\r\n      <div>\r\n        <h4>You will need:</h4>\r\n        <p><b>{packsOfBiscuits.toFixed(1)}</b> packs of biscuits</p>\r\n        <p><b>{remains.toFixed(1)}</b> biscuits additionally</p>\r\n        { remainsInTotal !== 0 ?\r\n        <p><b>And 1 biscuit extra, to fill in the gap</b></p>\r\n        : null }\r\n        <h3>Happy making biscuit cake! :)</h3>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      trayArea: {\r\n        length: 0,\r\n        width: 0,\r\n      },\r\n      biscuitArea: {\r\n        length: 0,\r\n        width: 0,\r\n      },\r\n      layers: 0,\r\n      biscuitsInPack: 0,\r\n      trayVisible: true,\r\n      biscuitVisible: false,\r\n      layersVisible: false,\r\n      biscuitsVisible: false,\r\n      calcVisible: false\r\n    }\r\n    this.handleTraySubmit = this.handleTraySubmit.bind(this);\r\n    this.setTrayLength = this.setTrayLength.bind(this);\r\n    this.setTrayWidth = this.setTrayWidth.bind(this);\r\n    this.renderTrayArea = this.renderTrayArea.bind(this);\r\n    this.handleBiscuitAreaSubmit = this.handleBiscuitAreaSubmit.bind(this);\r\n    this.setBiscuitLength = this.setBiscuitLength.bind(this);\r\n    this.setBiscuitAreaWidth = this.setBiscuitAreaWidth.bind(this);\r\n    this.renderBiscuitArea = this.renderBiscuitArea.bind(this);\r\n    this.handleLayersSubmit = this.handleLayersSubmit.bind(this);\r\n    this.setLayers = this.setLayers.bind(this);\r\n    this.setBiscuits = this.setBiscuits.bind(this);\r\n    this.handleBiscuitsSubmit = this.handleBiscuitsSubmit.bind(this);\r\n  }\r\n\r\n  async handleTraySubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.trayArea.length <= 0 && this.state.trayArea.width <= 0) return;\r\n    await this.setState({ ...this.state, trayVisible: !this.state.trayVisible });\r\n    await this.setState({ ...this.state, biscuitVisible: !this.state.biscuitVisible });\r\n  };\r\n\r\n  setTrayLength(e) {\r\n    this.setState({ trayArea: { ...this.state.trayArea, length: e.target.value } });\r\n  };\r\n\r\n  setTrayWidth(e) {\r\n    this.setState({ trayArea: { ...this.state.trayArea, width: e.target.value } });\r\n  };\r\n\r\n  renderTrayArea() {\r\n    let area = this.state.trayArea.length * this.state.trayArea.width;\r\n    return <Area size={area} />\r\n  };\r\n\r\n  async handleBiscuitAreaSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.biscuitArea.length <= 0 && this.state.biscuitArea.width <= 0) return;\r\n    await this.setState({ ...this.state, biscuitVisible: !this.state.biscuitVisible });\r\n    await this.setState({ ...this.state, layersVisible: !this.state.layersVisible });\r\n  };\r\n\r\n  setBiscuitLength(e) {\r\n    this.setState({ biscuitArea: { ...this.state.biscuitArea, length: e.target.value } });\r\n  };\r\n\r\n  setBiscuitAreaWidth(e) {\r\n    this.setState({ biscuitArea: { ...this.state.biscuitArea, width: e.target.value } });\r\n  };\r\n\r\n  renderBiscuitArea() {\r\n    let area = this.state.biscuitArea.length * this.state.biscuitArea.width;\r\n    return <Area size={area} />\r\n  };\r\n\r\n  async handleLayersSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.layers <= 0) return;\r\n    await this.setState({ ...this.state, layersVisible: !this.state.layersVisible });\r\n    await this.setState({ ...this.state, biscuitsVisible: !this.state.biscuitsVisible });\r\n  };\r\n\r\n  setLayers(e) {\r\n    this.setState({ ...this.state, layers: e.target.value });\r\n  }\r\n\r\n  setBiscuits(e) {\r\n    this.setState({ ...this.state, biscuitsInPack: e.target.value });\r\n  }\r\n\r\n  async handleBiscuitsSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.biscuitsInPack <= 0) return;\r\n    await this.setState({ ...this.state, biscuitsVisible: !this.state.biscuitsVisible });\r\n    await this.setState({ ...this.state, calcVisible: !this.state.calcVisible });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h3>Calculator for making biscuit cake.</h3> \r\n          { this.state.trayVisible && (\r\n            <div className=\"tray-area\">\r\n              <form onSubmit={this.handleTraySubmit}>\r\n                <p>Insert the length and width of your tray (in cm).</p>\r\n                <p>Your tray's length: {this.state.trayArea.length} cm</p>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setTrayLength}\r\n                  value={this.state.trayArea.length}\r\n                />\r\n                <p>Your tray's width: {this.state.trayArea.width} cm</p>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setTrayWidth}\r\n                  value={this.state.trayArea.width}\r\n                />\r\n                <button onClick={this.handleTraySubmit}>\r\n                  Submit!\r\n                </button>\r\n              </form>\r\n            </div>\r\n          )}\r\n          { this.state.biscuitVisible && (\r\n            <div className=\"biscuit-area\">\r\n              <form onSubmit={this.handleBiscuitAreaSubmit.bind(this)}>\r\n                <p>Insert the length and width of one biscuit (in cm).</p>\r\n                <p>Your biscuit's length: {this.state.biscuitArea.length} cm</p>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setBiscuitLength}\r\n                  value={this.state.biscuitArea.length}\r\n                />\r\n                <p>Your biscuit's width: {this.state.biscuitArea.width} cm</p>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setBiscuitAreaWidth}\r\n                  value={this.state.biscuitArea.width}\r\n                />\r\n                <button onClick={this.handleBiscuitAreaSubmit}>\r\n                  Submit!\r\n                </button>\r\n              </form>\r\n            </div>\r\n          )}\r\n          { this.state.layersVisible && (\r\n            <div className=\"layers\">\r\n              <form onSubmit={this.handleLayersSubmit}>\r\n                <p>How many layers do you want to have your biscuit cake?</p>\r\n                <h4>{this.state.layers}</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setLayers}\r\n                  value={this.state.layers}\r\n                />\r\n                <button onClick={this.handleLayersSubmit}>\r\n                  Submit!\r\n                </button>\r\n              </form>\r\n            </div>\r\n          )}\r\n          { this.state.biscuitsVisible && (\r\n            <div className=\"biscuits\">\r\n              <form onSubmit={this.handleBiscuitsSubmit}>\r\n                <p>How many biscuits in one pack?</p>\r\n                <h4>{this.state.biscuitsInPack}</h4>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={this.setBiscuits}\r\n                  value={this.state.biscuitsInPack}\r\n                />\r\n                <button onClick={this.handleBiscuitsSubmit}>\r\n                  Submit!\r\n                </button>\r\n              </form>\r\n            </div>\r\n          )}\r\n          { this.state.calcVisible && <Calculation\r\n            tray={this.state.trayArea.length * this.state.trayArea.width}\r\n            biscuit={this.state.biscuitArea.length * this.state.biscuitArea.width}\r\n            layers={this.state.layers}\r\n            biscuits={this.state.biscuitsInPack}\r\n          />}\r\n        </header>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}